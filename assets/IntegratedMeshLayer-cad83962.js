import{eP as g,aF as S,bf as w,at as T,ai as i,aj as s,al as h,eS as _,af as O,aT as L,aH as $,ho as x,as as I,ar as d,ay as N,aA as M}from"./index-080e108a.js";import{O as A}from"./MultiOriginJSONSupport-e4912ffd.js";import{g as b}from"./persistable-ca976a2c.js";import{i as j}from"./APIKeyMixin-878a7aa7.js";import{l as K}from"./ArcGISService-83287338.js";import{c as V}from"./OperationalLayer-0e8f8b28.js";import{j as D}from"./PortalLayer-310c2800.js";import{N as J,K as c}from"./SceneService-6fea113d.js";import{d as P}from"./commonProperties-30089b06.js";import{s as U,l as E,u as R,m as z}from"./I3SLayerDefinitions-ffdb3821.js";import{f as y}from"./SceneModification-2715f58a.js";import"./multiOriginJSONSupportUtils-c978f4c3.js";import"./resourceExtension-91e7c3ce.js";import"./portalItemUtils-792a27e1.js";import"./originUtils-1469eeaf.js";import"./I3SIndexInfo-445e6968.js";import"./resourceUtils-b667b05b.js";var a;let n=a=class extends g(S.ofType(y)){constructor(e){super(e),this.url=null}clone(){return new a({url:this.url,items:this.items.map(e=>e.clone())})}toJSON(e){return this.toArray().map(o=>o.toJSON(e)).filter(o=>!!o.geometry)}static fromJSON(e,o){const r=new a;for(const p of e)r.add(y.fromJSON(p,o));return r}static async fromUrl(e,o,r){const p={url:w(e),origin:"service"},u=await T(e,{responseType:"json",signal:r==null?void 0:r.signal}),v=o.toJSON(),l=[];for(const m of u.data)l.push(y.fromJSON({...m,geometry:{...m.geometry,spatialReference:v}},p));return new a({url:e,items:l})}};i([s({type:String})],n.prototype,"url",void 0),n=a=i([h("esri.layers.support.SceneModifications")],n);const f=n;let t=class extends J(K(V(D(_(A(j(M))))))){constructor(...e){super(...e),this._handles=new O,this.geometryType="mesh",this.operationalLayerType="IntegratedMeshLayer",this.type="integrated-mesh",this.nodePages=null,this.materialDefinitions=null,this.textureSetDefinitions=null,this.geometryDefinitions=null,this.serviceUpdateTimeStamp=null,this.profile="mesh-pyramids",this.modifications=null,this._modificationsSource=null,this.elevationInfo=null,this.path=null}destroy(){this._handles.destroy()}initialize(){this._handles.add(L(()=>this.modifications,"after-changes",()=>this.modifications=this.modifications,$))}normalizeCtorArgs(e,o){return typeof e=="string"?{url:e,...o}:e}readModifications(e,o,r){this._modificationsSource={url:x(e,r),context:r}}async load(e){return this.addResolvingPromise(this._doLoad(e)),this}async _doLoad(e){const o=e==null?void 0:e.signal;try{await this.loadFromPortal({supportedTypes:["Scene Service"]},e)}catch(r){I(r)}if(await this._fetchService(o),this._modificationsSource!=null){const r=await f.fromUrl(this._modificationsSource.url,this.spatialReference,e);this.setAtOrigin("modifications",r,this._modificationsSource.context.origin),this._modificationsSource=null}await this._fetchIndexAndUpdateExtent(this.nodePages,o)}beforeSave(){if(this._modificationsSource!=null)return this.load().then(()=>{},()=>{})}async saveAs(e,o){return this._debouncedSaveOperations(c.SAVE_AS,{...o,getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"integrated-mesh"},e)}async save(){const e={getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"integrated-mesh"};return this._debouncedSaveOperations(c.SAVE,e)}validateLayer(e){if(e.layerType&&e.layerType!=="IntegratedMesh")throw new d("integrated-mesh-layer:layer-type-not-supported","IntegratedMeshLayer does not support this layer type",{layerType:e.layerType});if(isNaN(this.version.major)||isNaN(this.version.minor))throw new d("layer:service-version-not-supported","Service version is not supported.",{serviceVersion:this.version.versionString,supportedVersions:"1.x"});if(this.version.major>1)throw new d("layer:service-version-too-new","Service version is too new.",{serviceVersion:this.version.versionString,supportedVersions:"1.x"})}_getTypeKeywords(){return["IntegratedMeshLayer"]}};i([s({type:String,readOnly:!0})],t.prototype,"geometryType",void 0),i([s({type:["show","hide"]})],t.prototype,"listMode",void 0),i([s({type:["IntegratedMeshLayer"]})],t.prototype,"operationalLayerType",void 0),i([s({json:{read:!1},readOnly:!0})],t.prototype,"type",void 0),i([s({type:U,readOnly:!0})],t.prototype,"nodePages",void 0),i([s({type:[E],readOnly:!0})],t.prototype,"materialDefinitions",void 0),i([s({type:[R],readOnly:!0})],t.prototype,"textureSetDefinitions",void 0),i([s({type:[z],readOnly:!0})],t.prototype,"geometryDefinitions",void 0),i([s({readOnly:!0})],t.prototype,"serviceUpdateTimeStamp",void 0),i([s({type:f}),b({origins:["web-scene","portal-item"],type:"resource",prefix:"modifications"})],t.prototype,"modifications",void 0),i([N(["web-scene","portal-item"],"modifications")],t.prototype,"readModifications",null),i([s(P)],t.prototype,"elevationInfo",void 0),i([s({type:String,json:{origins:{"web-scene":{read:!0,write:!0},"portal-item":{read:!0,write:!0}},read:!1}})],t.prototype,"path",void 0),t=i([h("esri.layers.IntegratedMeshLayer")],t);const se=t;export{se as default};
