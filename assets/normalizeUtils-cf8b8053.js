import{cm as T,es as U,at as X,cs as F,bf as W,i6 as Z,i7 as _,bz as B,bZ as E,dD as G,c8 as O,i8 as M,ak as P,bb as H,ar as K}from"./index-080e108a.js";import{r as z,o as A,i as R,s as C}from"./normalizeUtilsCommon-500064b3.js";async function Q(t,s,f,n){const e=T(t),c=s[0].spatialReference,a={...n,query:{...e.query,f:"json",sr:JSON.stringify(c),target:JSON.stringify({geometryType:U(s[0]),geometries:s}),cutter:JSON.stringify(f)}},o=await X(e.path+"/cut",a),{cutIndexes:u,geometries:y=[]}=o.data;return{cutIndexes:u,geometries:y.map(h=>{const x=F(h);return x.spatialReference=c,x})}}async function V(t,s,f){const n=typeof t=="string"?W(t):t,e=s[0].spatialReference,c=U(s[0]),a={...f,query:{...n.query,f:"json",sr:e.wkid??JSON.stringify(e),geometries:JSON.stringify(Z(s))}},{data:o}=await X(n.path+"/simplify",a);return _(o.geometries,c,e)}const D=B.getLogger("esri.geometry.support.normalizeUtils");function Y(t){return t.type==="polygon"}function tt(t){return t[0].type==="polygon"}function et(t){return t[0].type==="polyline"}function st(t,s){if(!(t instanceof O||t instanceof P)){const e="straightLineDensify: the input geometry is neither polyline nor polygon";throw D.error(e),new K(e)}const f=A(t),n=[];for(const e of f){const c=[];n.push(c),c.push([e[0][0],e[0][1]]);for(let a=0;a<e.length-1;a++){const o=e[a][0],u=e[a][1],y=e[a+1][0],h=e[a+1][1],x=Math.sqrt((y-o)*(y-o)+(h-u)*(h-u)),l=(h-u)/x,m=(y-o)/x,p=x/s;if(p>1){for(let b=1;b<=p-1;b++){const S=b*s,i=m*S+o,r=l*S+u;c.push([i,r])}const w=(x+Math.floor(p-1)*s)/2,j=m*w+o,I=l*w+u;c.push([j,I])}c.push([y,h])}}return Y(t)?new P({rings:n,spatialReference:t.spatialReference}):new O({paths:n,spatialReference:t.spatialReference})}function k(t,s,f){if(s){const n=st(t,1e6);t=H(n,!0)}return f&&(t=C(t,f)),t}function v(t,s,f){if(Array.isArray(t)){const n=t[0];if(n>s){const e=R(n,s);t[0]=n+e*(-2*s)}else if(n<f){const e=R(n,f);t[0]=n+e*(-2*f)}}else{const n=t.x;if(n>s){const e=R(n,s);t=t.clone().offset(e*(-2*s),0)}else if(n<f){const e=R(n,f);t=t.clone().offset(e*(-2*f),0)}}return t}function nt(t,s){let f=-1;for(let n=0;n<s.cutIndexes.length;n++){const e=s.cutIndexes[n],c=s.geometries[n],a=A(c);for(let o=0;o<a.length;o++){const u=a[o];u.some(y=>{if(y[0]<180)return!0;{let h=0;for(let l=0;l<u.length;l++){const m=u[l][0];h=m>h?m:h}h=Number(h.toFixed(9));const x=-360*R(h,180);for(let l=0;l<u.length;l++){const m=c.getPoint(o,l);c.setPoint(o,l,m.clone().offset(x,0))}return!0}})}if(e===f){if(tt(t))for(const o of A(c))t[e]=t[e].addRing(o);else if(et(t))for(const o of A(c))t[e]=t[e].addPath(o)}else f=e,t[e]=c}return t}async function ot(t,s,f){if(!Array.isArray(t))return ot([t],s);s&&typeof s!="string"&&D.warn("normalizeCentralMeridian()","The url object is deprecated, use the url string instead");const n=typeof s=="string"?s:(s==null?void 0:s.url)??E.geometryServiceUrl;let e,c,a,o,u,y,h,x,l=0;const m=[],p=[];for(const i of t)if(i!=null)if(e||(e=i.spatialReference,c=G(e),a=e.isWebMercator,y=a?102100:4326,o=z[y].maxX,u=z[y].minX,h=z[y].plus180Line,x=z[y].minus180Line),c)if(i.type==="mesh")p.push(i);else if(i.type==="point")p.push(v(i.clone(),o,u));else if(i.type==="multipoint"){const r=i.clone();r.points=r.points.map(g=>v(g,o,u)),p.push(r)}else if(i.type==="extent"){const r=i.clone()._normalize(!1,!1,c);p.push(r.rings?new P(r):r)}else if(i.extent){const r=i.extent,g=R(r.xmin,u)*(2*o);let d=g===0?i.clone():C(i.clone(),g);r.offset(g,0),r.intersects(h)&&r.xmax!==o?(l=r.xmax>l?r.xmax:l,d=k(d,a),m.push(d),p.push("cut")):r.intersects(x)&&r.xmin!==u?(l=r.xmax*(2*o)>l?r.xmax*(2*o):l,d=k(d,a,360),m.push(d),p.push("cut")):p.push(d)}else p.push(i.clone());else p.push(i);else p.push(i);let w=R(l,o),j=-90;const I=w,b=new O;for(;w>0;){const i=360*w-180;b.addPath([[i,j],[i,-1*j]]),j*=-1,w--}if(m.length>0&&I>0){const i=nt(m,await Q(n,m,b,f)),r=[],g=[];for(let $=0;$<p.length;$++){const L=p[$];if(L!=="cut")g.push(L);else{const q=i.shift(),N=t[$];N!=null&&N.type==="polygon"&&N.rings&&N.rings.length>1&&q.rings.length>=N.rings.length?(r.push(q),g.push("simplify")):g.push(a?M(q):q)}}if(!r.length)return g;const d=await V(n,r,f),J=[];for(let $=0;$<g.length;$++){const L=g[$];L!=="simplify"?J.push(L):J.push(a?M(d.shift()):d.shift())}return J}const S=[];for(let i=0;i<p.length;i++){const r=p[i];if(r!=="cut")S.push(r);else{const g=m.shift();S.push(a===!0?M(g):g)}}return S}export{ot as b};
