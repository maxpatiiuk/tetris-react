import{eQ as w,eS as $,eR as I,cX as O,as as T,da as b,c_ as f,eW as R,at as g,ca as E,cR as M,eX as j,ar as v,bn as L,ai as s,aj as p,eY as S,ay as P,bY as F,al as N,aA as J,eZ as q}from"./index-080e108a.js";import{O as U}from"./MultiOriginJSONSupport-e4912ffd.js";import{i as A}from"./APIKeyMixin-878a7aa7.js";import{E as k,f as _,Y as V}from"./SublayersOwner-ee341b5e.js";import{l as z}from"./ArcGISService-83287338.js";import{o as W}from"./CustomParametersMixin-231c4be8.js";import{c as B}from"./OperationalLayer-0e8f8b28.js";import{j as C}from"./PortalLayer-310c2800.js";import{a as D}from"./TemporalLayer-f17c9161.js";import{f as G}from"./commonProperties-30089b06.js";import{m as H}from"./ExportImageParameters-649a2637.js";import{t as K}from"./imageBitmapUtils-391f7b8f.js";import{e as x}from"./sublayerUtils-1269bca6.js";import{e as Y}from"./versionUtils-f17daa93.js";import"./portalItemUtils-792a27e1.js";import"./UniqueValueRenderer-fef4204d.js";import"./diffUtils-590c9088.js";import"./jsonUtils-f73b3833.js";import"./DictionaryLoader-c0729336.js";import"./FieldsIndex-f79a8f26.js";import"./heatmapUtils-327ef4c5.js";import"./sql-734ecbc5.js";import"./QueryTask-6f808a9e.js";import"./Query-1c961d4c.js";import"./executeForIds-5eaf002d.js";import"./query-93c6e211.js";import"./normalizeUtils-cf8b8053.js";import"./normalizeUtilsCommon-500064b3.js";import"./pbfQueryUtils-26a87215.js";import"./pbf-d9aa3914.js";import"./queryZScale-8f9616ff.js";import"./executeQueryJSON-7c41ada5.js";import"./FeatureSet-111cb247.js";import"./executeQueryPBF-0f188593.js";import"./FeatureType-db96032c.js";import"./FeatureTemplate-2a7e96c1.js";import"./LabelClass-2d53c485.js";import"./defaults-34554cbf.js";import"./defaultsJSON-59981e75.js";import"./labelingInfo-144f3d9f.js";import"./serviceCapabilitiesUtils-959e798a.js";import"./AttachmentQuery-972bbd60.js";import"./popupUtils-82ea8abb.js";import"./floorFilterUtils-080a7cd2.js";let i=class extends w(D($(k(_(z(B(C(U(I(A(W(O(J))))))))))))){constructor(...e){super(...e),this.dateFieldsTimeReference=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeReference=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,o){return typeof e=="string"?{url:e,...o}:e}load(e){const o=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(T).then(()=>this._fetchService(o))),Promise.resolve(this)}readImageFormat(e,o){const l=o.supportedImageFormatTypes;return l&&l.includes("PNG32")?"png32":"png24"}writeSublayers(e,o,l,t){var h;if(!this.loaded||!e)return;const a=e.slice().reverse().flatten(({sublayers:r})=>r&&r.toArray().reverse()).toArray();let n=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&((h=this.capabilities.exportMap)!=null&&h.supportsDynamicLayers)){const r=b(t.origin);if(r===f.PORTAL_ITEM){const c=this.createSublayersForOrigin("service").sublayers;n=x(a,c,f.SERVICE)}else if(r>f.PORTAL_ITEM){const c=this.createSublayersForOrigin("portal-item");n=x(a,c.sublayers,b(c.origin))}}const m=[],d={writeSublayerStructure:n,...t};let y=n;a.forEach(r=>{const c=r.write({},d);m.push(c),y=y||r.originOf("visible")==="user"}),m.some(r=>Object.keys(r).length>1)&&(o.layers=m),y&&(o.visibleLayers=a.filter(r=>r.visible).map(r=>r.id))}createExportImageParameters(e,o,l,t){const a=t&&t.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const n=new H({layer:this,floors:t==null?void 0:t.floors,scale:R({extent:e,width:o})*a}),m=n.toJSON();n.destroy();const d=!t||!t.rotation||this.version<10.3?{}:{rotation:-t.rotation},y=e&&e.spatialReference,h=y.wkid||JSON.stringify(y.toJSON());m.dpi*=a;const r={};if(t!=null&&t.timeExtent){const{start:c,end:u}=t.timeExtent.toJSON();r.time=c&&u&&c===u?""+c:`${c??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(r.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:h,imageSR:h,size:o+","+l,...m,...d,...r}}async fetchImage(e,o,l,t){const{data:a}=await this._fetchImage("image",e,o,l,t);return a}async fetchImageBitmap(e,o,l,t){const{data:a,url:n}=await this._fetchImage("blob",e,o,l,t);return K(a,n,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const o={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:l}=await g(this.url,o),{extent:t,fullExtent:a,timeExtent:n}=l,m=t||a;return{fullExtent:m&&E.fromJSON(m),timeExtent:n&&M.fromJSON({start:n[0],end:n[1]})}}loadAll(){return j(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return Y(this,e)}async _fetchImage(e,o,l,t,a){var d,y,h;const n={responseType:e,signal:(a==null?void 0:a.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(o,l,t,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},m=this.parsedUrl.path+"/export";if(((d=n.query)==null?void 0:d.dynamicLayers)!=null&&!((h=(y=this.capabilities)==null?void 0:y.exportMap)!=null&&h.supportsDynamicLayers))throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:n.query});try{const{data:r}=await g(m,n);return{data:r,url:m}}catch(r){throw L(r)?r:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${m}`,{error:r})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:o,ssl:l}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});l&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=o,this.read(o,{origin:"service",url:this.parsedUrl})}};s([p({type:S})],i.prototype,"dateFieldsTimeReference",void 0),s([p({type:Boolean})],i.prototype,"datesInUnknownTimezone",void 0),s([p()],i.prototype,"dpi",void 0),s([p()],i.prototype,"gdbVersion",void 0),s([p()],i.prototype,"imageFormat",void 0),s([P("imageFormat",["supportedImageFormatTypes"])],i.prototype,"readImageFormat",null),s([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],i.prototype,"imageMaxHeight",void 0),s([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],i.prototype,"imageMaxWidth",void 0),s([p()],i.prototype,"imageTransparency",void 0),s([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),s([p({json:{read:!1,write:!1}})],i.prototype,"labelsVisible",void 0),s([p({type:["ArcGISMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),s([p({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),s([p({type:S})],i.prototype,"preferredTimeReference",void 0),s([p()],i.prototype,"sourceJSON",void 0),s([p({json:{write:{ignoreOrigin:!0}}})],i.prototype,"sublayers",void 0),s([F("sublayers",{layers:{type:[V]},visibleLayers:{type:[q]}})],i.prototype,"writeSublayers",null),s([p({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),s([p({json:{read:!1},readOnly:!0,value:"map-image"})],i.prototype,"type",void 0),s([p(G)],i.prototype,"url",void 0),i=s([N("esri.layers.MapImageLayer")],i);const Ve=i;export{Ve as default};
