import{cR as s,fO as a,fP as d,fQ as y,fR as w,ca as u,bc as g}from"./index-080e108a.js";function v(i){if(!i)return i;const{start:e,end:n}=i;return new s({start:e!=null?a(e,-e.getTimezoneOffset(),"minutes"):e,end:n!=null?a(n,-n.getTimezoneOffset(),"minutes"):n})}function b(i){if(!i)return i;const{start:e,end:n}=i;return new s({start:e!=null?a(e,e.getTimezoneOffset(),"minutes"):e,end:n!=null?a(n,n.getTimezoneOffset(),"minutes"):n})}const I={type:Boolean,value:!0,json:{origins:{service:{read:!1,write:!1},"web-map":{read:!1,write:!1}},name:"screenSizePerspective",write:!0}},O={type:Boolean,value:!0,json:{name:"disablePopup",read:{reader:(i,e)=>!e.disablePopup},write:{enabled:!0,writer(i,e,n){e[n]=!i}}}},D={type:Boolean,value:!0,nonNullable:!0,json:{name:"showLabels",write:!0}},S={type:String,json:{origins:{"portal-item":{write:!1}},write:{isRequired:!0,ignoreOrigin:!0,writer:y}}},N={type:Boolean,value:!0,nonNullable:!0,json:{origins:{service:{read:{enabled:!1}}},name:"showLegend",write:!0}},h={value:null,type:w,json:{origins:{service:{name:"elevationInfo",write:!0}},name:"layerDefinition.elevationInfo",write:!0}};function R(i){return{type:i,readOnly:!0,json:{origins:{service:{read:!0}},read:!1}}}const p={write:!0,read:!0},m={type:Number,json:{origins:{"web-document":p,"portal-item":{write:!0}}}},x={...m,json:{...m.json,origins:{"web-document":{...p,write:{enabled:!0,target:{opacity:{type:Number},"layerDefinition.drawingInfo.transparency":{type:Number}}}}},read:{source:["layerDefinition.drawingInfo.transparency","drawingInfo.transparency"],reader:(i,e,n)=>n&&n.origin!=="service"||!e.drawingInfo||e.drawingInfo.transparency===void 0?e.layerDefinition&&e.layerDefinition.drawingInfo&&e.layerDefinition.drawingInfo.transparency!==void 0?d(e.layerDefinition.drawingInfo.transparency):void 0:d(e.drawingInfo.transparency)}}},T={type:s,readOnly:!0,get(){var f,c;if(!((f=this.layer)!=null&&f.timeInfo))return null;const{datesInUnknownTimezone:i,timeOffset:e,useViewTime:n}=this.layer,o=(c=this.view)==null?void 0:c.timeExtent;let t=this.layer.timeExtent;i&&(t=b(t));let r=n?o&&t?o.intersection(t):o||t:t;if(!r||r.isEmpty||r.isAllTime)return r;e&&(r=r.offset(-e.value,e.unit)),i&&(r=v(r));const l=this._get("timeExtent");return r.equals(l)?l:r}},z={type:u,readOnly:!0,json:{origins:{service:{read:{source:["fullExtent","spatialReference"],reader:(i,e)=>{const n=u.fromJSON(i);return e.spatialReference!=null&&typeof e.spatialReference=="object"&&(n.spatialReference=g.fromJSON(e.spatialReference)),n}}}},read:!1}},E={type:String,json:{origins:{service:{read:!1},"portal-item":{read:!1}}}},B={type:Number,json:{origins:{service:{write:{enabled:!1}}},read:{source:"layerDefinition.minScale"},write:{target:"layerDefinition.minScale"}}},P={type:Number,json:{origins:{service:{write:{enabled:!1}}},read:{source:"layerDefinition.maxScale"},write:{target:"layerDefinition.maxScale"}}},q={json:{write:{ignoreOrigin:!0},origins:{"web-map":{read:!1,write:!1}}}};export{P as D,B as I,q as S,T as b,N as c,h as d,S as f,x as g,z as j,I as l,D as m,O as p,m as u,E as v,R as y};
